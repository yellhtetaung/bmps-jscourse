BMPS Javascript Basic To Advance

alert("Hello World") သည် javascript ရဲ့ function ဖြစ်တယ်။

=> Javascript 

Javascript is a high-level, object-oriented, multi-paradigm programming language.

objcet-oriented = object base ထားပြီး data တွေကို သိမ်း language ဖြစ်တယ်။

3 core technology is using html, css, javascript

ES = ECMAScript
ES5 = ECMAScript
ES6 = Modern JavaScript

let js = "amazing";

= = asign
; = line end

console.log() is javascript of special function

=> Values and Variable

"Mg Mg", 25 = value/ literal value

Value တွေကို Variable တွေထဲမှာ ထည့်သိမ်းလို့ရတယ်။

=> Variable Declare

let firstName = "Hello";

let = keyword
firstName = variable name
"Hello" = value
= = assigment operator

Naming Conversion

fullName
full_name
_fullname

=> Data Types

1. Number: Floating Point numbers => Used for decimas and integers (let age = 23;) 

2. String: Sequence of charaters => Used for text (let firstName = 'Jonas';)

3. Boolean: Logical type that can only be true or false => Used for taking decisions (let fullAge = true)

4. Undefined (empty value)

5. Null

6. Symbol (release 2015)

7. Big Int (release 2021)

=> Undefined 

Variable declare လုပ်ပြီးတဲ့အချိန်မှာ value တစ်ခုကို assign မလုပ်ရသေးတဲ့ အခါမှာ undefined ဖြစ်တယ်။

let helloTest; // undefined

Javascript မှာ variable တွေကိုတည်ဆောက်တဲ့အခါမှာ dynamic styling နဲ့တည်ဆောက်တယ်။

* = Asterisk

=> Keyword

1. let (ES6) (value တွေကို change လို့ရတယ်။ keyword ကို တော့ ပြန်ခေါ်လို့မရဘူး။)

2. const (ES6) (assign လုပ်ထားတဲ့ value တွေကို change လို့မရဘူး) (immutable variable/ empty variable)

3. var

variable ထဲမှာရှိတဲ့ value တွေ change သွားတာကို mutation ဖြစ်တယ်လို့ ခေါ်ပါတယ်။
value change တာကို mutate လုပ်တယ်လို့ ခေါ်ပါတယ်။

=> Basic Operator

Operator ရဲ့ လုပ်ဆောင်ချက်က value တွေကို ပြောင်းလဲသွားစေနိုင်သလို value အများကြီးကိုလည်း တစ်ခုတည်းဖြစ်အောင် လုပ်ဆောင်ပေးနိုင်တယ်။

=> Arithematic Operator / Mathematic Operactor

+, -, *, / , =, +=, -=, *=, /=, ++, --

=> Comparison Operator (return true, false)

==, ===, !=, !==, > , < , >=, <=

=> if else statement (if else control structure)

if(condition){
  code to be executed
} else{
  code to be executed
}

=> Type Conversion and Coercion

Conversion = value တွေကို တစ်မျိုးကနေ တစ်မျိုးကို manual ပြောင်းပေးတာ

Coercion = value တွေ တစ်မျိုးကနေ တစ်မျိုးကို သူ့အလိုလို ပြောင်းလဲသွားဖြစ်တယ်။ + sign မှာပဲ အလုပ်လုပ်မယ်။ ကျန်တာတွေအားလုံးသည် number ကိုပြောင်းပေးတယ်။

=> Truthy and Falsy Value 

Falsy Value
-------------
1. 0 (Zero)
2. '' (Empty String)
3. undefined
4. Null 
5. NaN (Not a Number)(Number Data Type)

=> Boolean Logic ( true / false )

Logical Operator 
-----------------

1. And && ( value နှစ်ခုစလုံး true ဖြစ်မှ true ဖြစ်မယ် )
2. Or ||  ( value တစ်ခု true ဖြစ်ရင် true ဖြစ်မယ် )
3. Not ! ( ဆန့်ကျင်ဘက် value ပြောင်းချင်ရင် သုံးတယ် )

=> Switch Statement 
switch(condition 1){
  case "condition 2":
    code to be executed;
    break;
  case "condition 2":
    code to be executed;
    break;
  default:
    code to be executed;
}

=> Statements and Expressions

Expression is a piece of code that produce a value. (ကိုယ်ပိုင် value ထုတ်ပေးနိုင်တာကို expression လို့ခေါ်တယ်။)
Template literal can be use expression and can't be use statement.
3 + 4 = 7
1990
true && false && !true = false 

Statement is a bigger piece of code that is executed and which does not produce a value on itself

=> The Conditional (Ternary) Operator 
              condition true        condition false
condition ? code to be executed : code to be executed 

-------------------------------------------------------------------------------
=> JavaScript Release ES5 ES6+ and ESNext

1995 
=> Brendan Eich creates the very first version of JavaScript in just 10 days. It was called Mocha, but already had many fundamental features of modern JavaScript!

1996 
=> Mocha changes to LiveScript and the to JavaScript, in order to attract Java developers. However, JavaScript has almost nothing to do with Java 
=> Microsoft launches IE, copying JavaScript from Netscape and calling it JScript;

1997
=> With a need to standardize the language, EcMA releases ECMAScript 1 (ES1), the first offical standard for JavaScript (ECMAScript is the standard, JavaScript the language in practice);

2009
=> ES5 (ECMAScript 5) is released with lots of great new features;

2015
=> ES6/ES2015 (ECMAScript 2015) was released: the biggest update to the language ever!
=> ECMAScript changes to an annual release cycle in order to ship less features per update

2016 - 
=> Release of ES2016 / ES2017/ ES2018 / ES2019/ ES2020 / ES2021 / ... / ES2089
-------------------------------------------------------------------------------

=> Equality Operators == and ===

== equal to (same value or same datatype)
=== equal equal to (same value and datatype)

=> Strict Mode

'use strict';

=> Functions
Function is a piece of code 

function name(){
  code to be executed
}
name(); = invoking function

function name(parameter, parameter){
  code to be executed
}
name(5,0) = (5,0)= function argument

function သည် မတူညီတဲ့ input value တွေကို လက်ခံနိုင်တယ်။ အဲ့လက်ခံလိုက်တဲ့ input value တွေကို မူတည်ပြီးတော့ function body ထဲမှာ process လုပ်တယ်။ အဲ့ value တွေကို မူတည်ပြီးတော့ output ပြန်ထုတ်ပေးတယ်။ function သည် အနည်းဆုံးတစ်ကြိမ်တော့ ပြန်ခေါ်သုံးပေးရတယ်။ invoke မလုပ်၍ အလုပ်မလုပ်ပါဘူး။

function သည် value တွေကို return ပြန် မပေးနိုင်ဘူး။ ထို့ကြောင့် return keyword သုံးပြီးတော့ return ပြန်ပေးရတယ်။ 


=> Function Declaration and Function Expression

Function Declaration
---------------------
function name(){
  code to be executed
}
name();

Function Expression
--------------------
            anonymous function
const name = function(){
  code to be executed
}
name();

=> Arrow Function

()=>{
  code to be executed
}

(parameter) => code to be executed

တစ်ကြောင်းတည်းဆို return ပြန်ပေးစရာမလိုဘူး။ တစ်ကြောင်းထပ်ပိုရင်တော့ return ပြန်ပေးရမယ်။

=> Function Calling Other Function 

function fruitCutter(fruits) {
  return fruits * 4;
}

function fruitProcesser(apples, oranges) {
  const applePieces = fruitCutter(apples);
  const orangePieces = fruitCutter(oranges);

  console.log(apples, oranges);
  // console.log(applePieces, orangePieces);

  const juice = `This juice with ${apples} apples and ${oranges} oranges`;
  return juice;
}

fruitProcesser(2, 3);

function must follow dry(don't repeat yourself) principle

=> Review Functions

-1 is standard number of programming.

return တွေသည် function တွေကို ရုတ်တရက်ရပ်လိုက်တာဖြစ်တယ်။

=> Introduction To Array

JavaScript မှာ data တွေထည့်သိမ်းဖို့အတွက် Data Structure ဆိုတာ ရှိပါတယ်။
Two Type of Data Structure are Array and Object.

Array can be store diffetent data type.
array ထဲမှာဆိုရင် value(data) တွေကို element လို့ခေါ်တယ်။

const variablename = [value, value, value];
const variablename = new Array(value, value, value); (array of literal syntax)
array.length;
array.length -1; = get last index number

Replace array value
--------------------
array[index number] = value;

array ထဲမှာ array ထပ်ထည့်ထားတာကို nested array လို့ခေါ်တယ်။

=> Basic Array Operators(Methods)

Push Method
------------

array.push(argument);
push method က array တစ်ခုရဲ့နောက်ဆုံးမှာ element တစ်ခုထပ်ပေါင်းပေးတယ်။ မူလ orginal array ကို ထိခိုက်အောင်ပြောင်းလဲတယ်။
push သည် function တစ်ခုဖြစ်ပြီးတော့ သူ့ထဲမှာ argument ရှိတယ်။ အဲ့ argument သည် attach လုပ်ထားတဲ့ array ရဲ့နောက်ဆုံး element မှာ တစ်ခုထပ်ပေါင်းထည့်ပေးတယ်။

Unshift Method
---------------

array.unshift(argument);
unshift method က array တစ်ခုရဲ့ အရှေ့ဆုံးမှာ element တစ်ခုထပ်ပေါင်းပေးတယ်။ မူလ orginal array ကို ထိခိုက်အောင်ပြောင်းလဲတယ်။

Pop Method 
----------

array.pop();
pop method က array တစ်ခုရဲ့နောက်ဆုံးက element ကိုဖျက်ထုတ်ပေးတယ်။ မူလ orginal array ကို ထိခိုက်အောင်ပြောင်းလဲတယ်။

Shift Method 
-------------

array.shift();
shift method က array တစ်ခုရဲ့ ရှေ့ဆုံးက element ကိုဖျက်ထုတ်ပေးတယ်။ မူလ orginal array ကို ထိခိုက်အောင်ပြောင်းလဲတယ်။

indexOf Method 
---------------

array.indexOf(argument);
indexOf method က array တစ်ခုမှာရှိတဲ့ index number ကိုရှာချင်တဲ့အခါ element ကိုပေးပြီးရှာတာဖြစ်ပါတယ်။

Includes Method (return true/false)
---------------

array.includes(argument);
array ထဲမှာ လိုချင်တဲ့ value ရှိမရှိကို တိုက်စစ်ချင်တဲ့အခါမှာ includes method ကိုသုံးတယ်။ ၎င်း value သည် data type ရော value ကောတူမှ true return ပြန်တယ်။ 

=> Introduction to Object

const name = {key: value, key: value, key: value} (objcet of literal syntax)
key: value = properties

=> Dot and Bracket Notation

Dot Notation
--------------
object.propertyname;
Dot notation ရဲ့နောက်မှာ final name တွေပဲလိုက်တယ်။

Bracket Notation 
-----------------
object['property name'];
Bracket Notation ရဲ့နောက်မှာ အစားသွင်းထားတဲ့ name တွေလိုက်လို့ရတယ်။

const nameKey = 'Name';
console.log(personalObject["first" + nameKey]);
"first" + nameKey = expression

const interstIn = prompt(
  "What do you want to know about personalObject? Choose between firstName, lastName, age, job, friends"
);
console.log(interstIn);
console.log(personalObject[interstIn]);

=> Object Methods

Object ထဲမှာ ရေးထားတဲ့ function ကို method လို့ခေါ်ပါတယ်။ ဘယ် function မဆို object ထဲမှာ ရေးရင် method ဖြစ်သွားပါတယ်။ parameter မလိုတဲ့ object method ကို ပြန်ခေါ်သုံးမယ်ဆိုရင် this ကိုပြန်ခေါ်သုံးတယ်။ this သည် current object ကို ပြန်ညွှန်းပါတယ်။

eg....

const bmps = {
  firstName: "BMPS",
  lastName: "Education Center",
  birthYear: 1991,
  job: "Js Developer",
  friends: ["Michal", "Peter", "Steven"],
  hasDriverLicense: true,
  calcAge: function (birthYear) {
    return 2022 - birthYear;
  },
};

console.log(bmps.calcAge(bmps.birthYear)); // 31 dot notation
console.log(bmps["calcAge"](bmps.birthYear)); // 31 bracket notation

=> Iteration The For Loop

Loop သည် အလုပ်တစ်ခုကို ခိုင်းစရာမလိုပဲ ထပ်တလဲလဲ လုပ်တဲ့ process ဖြစ်တယ်။ 
Programming မှာ database က data တွေကို ဆွဲထုတ်တဲ့ အခါမှာ အကြိမ်ကြိမ်ထုတ်ရတာဖြစ်တဲ့အတွက်ကြောင့် loop တွေသုံးပြီးတော့ ဆွဲထုတ်တယ်

for(start point; end point; increment/decrement ){
  code to be executed;
}

=> Looping Arrays, Breaking and Continuing

continue; အဲ့နေရာရောက်ရင် ကျော်ပြီးအလုပ်ဆက်လုပ်မယ်။
break; အဲ့နေရာရောက်ရင် ရပ်ပလိုက်တယ်

=> Looping Backwards and Loops in Loops

Backward Loop
--------------
for(start point, end point, i--){
  code to be executed
}

const bmpsArray = [
  "BMPS",
  "Education Center",
  2022 - 2021,
  "Developer",
  ["JavaScript", "PHP", "Flutter"],
];

for (let i = bmpsArray.length - 1; i >= 0; i--) {
  console.log(bmpsArray[i]);
}

Loop in Loop 
-------------

for(start point; end point; increment/decrement){
  code to be executed;
  for(start point; end point; increment/decrement){
    code to be executed;
  }
}

=> While Loop

start point 
while(end point){
  code to be executed;
  increment/decrement
}

=> What is DOM and DOM Manipulation

DOM
----
DOCUMENT OBJECT MODEL: Structure representation of html documents. Allows javascript to access html elements and styles to manipulate them.

DOM ကို သုံးမယ်ဆိုရင် doucment ဆိုတာကို သုံးပေးရတယ်။

DOM and DOM Method တွေက web api အမျိုးအစားတစ်မျိုးဖြစ်တယ်။

html code တွေကို javascript ကနေ ပြန်ပြင်လိုက်တာ DOM manipulation လုပ်တယ်လို့ခေါ်တယ်။

=> Handling Click Event

selector.addEventListener('click', function(){
  code to be executed
})

=> Handling and ESC Key 
e.key = return string

=> An High Level Overview of JavaScript 

Javascript is a high-level, object-oriented, multi-paradigm programming language.

Javascript is a high-level, prototype-based object-oriented, multi-paradigm, interpreted of just-in-time compiled, dynamic, single-threaded, garbage-collected programming language with first-class functions and a non-blocking event loop concurrency model.

High-level = can't management. easy to learn. high-level programming language is slower than low-level programming language 

Garbage-collected = program မှာ မသုံးပဲ ထားတဲ့ function တွေကို memory ကနေ အလိုလျှောက်ရှင်းလင်းပေးတယ်။

interpreted or just-in-time compiled = javascript code to machine code ကို convert လုပ်တာကို compile လုပ်တယ်လို့ခေါ်တယ်။

Multi-paradigm
---------------

Paradigm: An approach and mindset of structuring code, which will direct your coding style and technique.

1. Procedural programming 
2. Object-oriented programming (OOP)
4. Functional programming (FP)

Prototype-based object-oriented = JavaScript သည် object base ကို အခြေခံထားတဲ့ အတွက်ကြောင့်ဖြစ်တယ်။

First-class Function
--------------------

In a language with first-class functions, functions are simply treated as variables. We can pass them into other functions, and return them from functions.

Dynamic 
-------

Dynamically-type language

=> The JavaScript Engine and Runtime 

Js engine program that ececutes javascript code

Js Engine 
-----------

1. Call Stack
2. Heap

JavaScript code line တစ်ကြောင်းချင်းစီးက execution လုပ်ဖို့အတွက် call stack ထဲကို ရောက်ပါတယ်။ အဲ့ဒါကို execution context လို့ခေါ်ပါတယ်။ code တွေက execution context ဖြစ်ပြီးနောက်ပိုင်းမှာ mechine code အဖြစ်ပြောင်းသွားတယ်။

Compilation: Entire code is converted into machine code at once, and writen to a binary file that can be executed by a computer.

Source Code == step 1(compilation)==> Portable file(machine code) == step2(execution)==> Program running
--------------------------------------------------------------------------------------------------------------------------------

Interpretation: Interpreter runs through the source code and exectes it line by line.

Source code == step 1(execution line by line)==> Program running
--------------------------------------------------------------------------------------------------------------------------------

Just-in-time(JIT) compilation: Entire code is converted into machine code at once, then executed immediately.

Source cdoe ==step1(compilation)==> Machine Code ==step2(execution)==> Program running
--------------------------------------------------------------------------------------------------------------------------------

Web apis တွေက JavaScript functions တွေပဲဖြစ်တယ်။ Web apis တွေသည် JavaScript အလုပ်လုပ်ဖို့အတွက် runtime ဖြစ်တယ်။


Lexical Scoping 

function scope မှာတွေ့ရတက်တယ်။ parent scope မှာ declare လုပ်ထားတဲ့ variable တွေကို သက်ဆိုင်ရင် function ကနေခေါ်သုံးလို့ရတာကို lexical scoping လို့ခေါ်တယ်။ 

Global Scope 
-------------

=> Outside of any function or block 
=> Variable declared in global scope are accessible everywhere

Function Scope
---------------

=> Variables are assessible onlye inside function, NOT outside
=> Also called local scope 
var is function scope

Block Scope ({} = block)
-------------------------

=> Variable are assessible only inside block(block scoped)
=> However, this only applies to let and const variables!
=> Functions are also block scoped (only in strict mode)

=> Variable Environment Hoisting and The TDZ

Hositing: Makes some types of variables accessible/usable in the code before they are actually declared. "Variables lifted to the top of their scope".

Before execution, code is scanned for variable declarations, and for each variable, a new property is created in the variabel environment object. 

function declarations 
---------------------
Hoisted       : Yes 
Initial value : Actual function 
Scope         : Block (in strict mode. Otherwise: function!)

var variables 
--------------
Hoisted       : Yes
Initial value : undefined
Scope         : Function

let and const variables 
------------------------
Hoisted       : No (Technically, yes. But not in practice)
Initial value : <uninitialized>,TDZ (Temporal Dead Zone)
Scope         : Block

function expressions and arrows 
--------------------------------

Depends if using var or let/const 

=> Why Hoisting 

1. Using functions before actual declaration;
2. var hoisting is just a byproduct.

=> Why TDZ 

1. Makes it easier to avoid and catch errors: accessing variables before declaration is bad practice and should be avoided;
2. Makes const variables actually work

=> The This Keyword 

This keyword က javascript မှာ ခေါ်သုံးထားတဲ့ function ပေါ်မူတည်ပြီးတော့ ပြောင်းပြောင်းသွားတယ်။

this keyword/variabel: Special variable that is created for every execution context(very function). Takes the value of (points to) the "owner" of the function in which the this keyword is used. 

this is NOT static. It depends on how the function is called, and its value is only assigned when the function is actually called.

Method => this =  <Object that is calling the method>

Simple function call => this = undefined (in strict mode! Otherwise: window(in the browser))

Arrow functions(don't get own this) => this = <this of surrounding function (lexical this)>

Event listener => this = <DOM element that the handler is attached to>

this သည် top-level function ထဲမှာဆိုရင် global object ကို သွားထောက်ပါတယ်။
global object = window object

Arrow function က parent scope ထဲက this keyword ကို ပြန်ညွှန်းတယ်။ 

object ထဲက function ထဲမှာရှိတဲ့ this keyword က သူ့ကိုခေါ်တဲ့ method ရဲ့ parent object ကို ပြန်ညွှန်းတယ်။

=> Primitives and Objects (Primitive vs Reference Types)

Objects Type တွေကို heap ထဲမှာ သွားသိမ်းတယ်။
Primitives Type တွေကို တော့ call stack ထဲမှာ သိမ်းတယ်။

=> Destructuring Arrays

Destructuring ကို arrays, objects တွေနဲ့တွဲသုံးနိုင်တယ်။

Destructuring Assign 
---------------------
const [a,b,c] = [1,2,3]

Default Value in destructuring
-------------------------------
const [a = 1, b = 1, c = 1] = [2,3]

JavaScript သည် array နဲ့ destructuring ကို = operator နဲ့ခွဲတယ်.

=> Destructing Object

Object တွေကို destructing နဲ့ပြန်ခေါ်သုံးတဲ့အခါမှာ variable name နဲ့ objcet keyname နဲ့တူနေမှ ရမယ်။ 

const {a,b,c} = object;

Change Variable name 
--------------------
const {a: d, b: e, c: f} = object;

=> Spread Operator (...)

Spread operator က array နဲ့အတူတူတွဲသုံးပါတယ်။ array ထဲမှာ ရှိတဲ့ element တွေကို အရင် ဖြန့်ချတယ် ပြီးတော့မှ collect ပြန်လုပ်တယ်။ Iterable တွေအကုန်လုံးထဲမှာ spread operator တွေအလုပ်လုပ်တယ်။ Spread Operator သည် template literal ထဲမှာ ထည့်သုံးလို့မရဘူး။

const arr = [3, 4, 5];
const newArr = [1, 2, ...arr];

=> Rest Pattern and Parameters

ပြန့်ကျဲနေတဲ့ element တွေကို စုပြီးတော့ array တစ်ခုအနေနဲ့ စုပေးတဲ့ လုပ်ငန်းစဥ်ကိုလုပ်ဆောင်တယ်။ assigment operator ဘယ်ဘက်အခြမ်းမှာရှိနေရင် rest pattern ဖြစ်ပြီး assigment operator ရဲ့ ညာဘက်ခြမ်းမှာရှိနေရင် spread operator ဖြစ်တယ်။ 
array ထဲမှာ သုံးတာကို rest pattern လို့ခေါ်ပြီးတော့ function ထဲမှာ သုံးတာကို rest parameter လို့ခေါ်တယ်။

const [a, b, ...others] = [1, 2, 3, 4, 5, 6, 7, 8]; (return = 1 2 (6) [3, 4, 5, 6, 7, 8])

function ထဲမှာ ဗြောက်သောက်လက်ခံ argument တွေကို arbitrary amount လို့ခေါ်တယ်။

Arbitrary amount 
----------------
const add = function (...numbers) {
  let sum = 0;
  for (let i = 0; i < numbers.length; i++) {
    sum += numbers[i];
  }
  console.log(sum);
};

add(2, 3); // 5
add(2, 3, 5); // 10
add(8, 7, 5, 6, 3, 1, 4, 7, 9, 5, 3); // 58

=> Short Circuiting

|| (or) / && (and) ၎င်း operator နှစ်ခုကို boolean datatype မှာ မဟုတ်ဘူး ဘယ် datatype နဲ့မဆိုတွဲသုံးလို့ရတယ်။ ဘယ် datatype ကို မဆိုလည်း return ပြန်ပေးတယ်။ အခုလို့ return ပြန်ပေးတာကို short circuiting လို့ခေါ်ပါတယ်။

|| (or) operator သည် သူ့ရဲ့ ဘယ်ဘက် value ကို အရင် ကြည့်တယ်။ သူသည် truthy value or falsy ကိုပဲ return ပြန်ပေးတယ်။ value နှစ်ခုစလုံးက falsy value ဖြစ်နေခဲ့မယ်ဆိုရင် နောက်ဆုံးက falsy value ကို return ပြန်ပေးတယ်။

&& (and) operator သည် ပထမဆုံးစတွေ့တဲ့ value မှာ falsy value ဖြစ်နေမယ်ဆိုရင် အဲ့ falsy value ကိုပဲ return ပြန်ပေးပါတယ်။ နောက်က value က အလုပ်မလုပ်တော့ပါဘူး။ value နှစ်ခုစလုံးက truthy value ဖြစ်နေရင် နောက်ဆုံးက turthy value ကို return ပြန်ပေးတယ်။

=> The Nullish Coalescing Operator (release in 2020)

Nullish value မသတ်မှတ်ထားတဲ့ အချိန်မှ turthy value ကို return ပြန်ပေးတယ်။ 

Nullish Value 2 type 
--------------------
1. undefined
2. null 

restaurant.numGuest = 0;
const guest2 = restaurant.numGuest ?? 10;
console.log(guest2); // 0

=> Logical Assigment Operator 

|| (or) assigment opeator
--------------------------
restaurant2.numGuest ||= 10;

?? (Nullish coalescing) assigment operator
------------------------------------------
restaurant2.numGuest ??= 10;

&& (and) assigment operator 
-----------------------------
restaurant2.owner &&= 'Anynomous';

=> Looping Arrays The For Of Loop

စမှတ်ကနေပြီးတော့ လုပ်ငန်းတစ်ခုမပြီး မချင်းကို အကြိမ်ကြိမ် လုပ်နေတာကို iteration လို့ခေါ်တယ်။ တစ်ခြား for loop, while loop တို့လိုပဲ continue, break တို့ အလုပ်လုပ်တယ်။ current index ကိုလည်း လိုအပ်ရင် ဆွဲထုတ်လို့ရတယ်။

for (const item of menu) {
  console.log(item);
}

return current index (return array)
---------------------

for (const item of menu.entries()) {
  console.log(item);
}

=> Enhanced Object Literals

object တစ်ခုထဲမှာ declare လုပ်ပြီးသား name တစ်ခုကို ပြန်ခေါ်သုံးတဲ့အခါ ပေးချင်တဲ့ name ချင်းတူနေတဲ့အခါမှာ key: value ရေးပေးစရာမလိုပဲ name တစ်ခုတည်းရေးပေးလို့ရတယ်။ အဲ့ဒါကို Enhanced object literals လို့ခေါ်တယ်။ method ရေးတဲ့အခါမှာလည်း ထိုနည်း၎င်းပဲ key ကြေငြာစရာမလိုပဲ name(){} တည်းရေးလို့ရပါတယ်။ compute properties တွေကို ရေးတဲ့အခါမှာ [] ထဲမှာရေးရတယ်။

=> Optional Chining (ES2020)

console.log(restaurant.openingHours?.mon?.open);

=> Looping Objects Object Keys Value and Entries 

for (const day of Object.keys(openingHours)) {
  console.log(day);
}

Object.keys(object); //return array 
Object တစ်ခုရဲ့ key တွေချည်းပဲလိုချင်ရင် သုံးတယ်။ 

Object.values(object); // return value
Object.entries(object); // return key and value 

=> Set 

Set ဆိုတာ unique value တွေကို စုပေးထားတဲ့ data structure တစ်ခုဖြစ်ပါတယ်။ set ထဲမှာ သိမ်းထားတဲ့ data တွေထဲမှာ ထပ်တူကျတဲ့ value တွေမရှိပါဘူး။ set မှာ key value တွေမရှိဘူး။ 

new Set(); // constructor function 

const orderSet = new Set([
  'Pasta',
  'Pizza',
  'Pizza',
  'Risotto',
  'Pasta',
  'Pizza',
]);
console.log(orderSet); // return {'Pasta', 'Pizza', 'Risotto'}

သူ့ထဲမှာပါတယ် အရေအတွက်ကို ကြည့်ချင်ရင် (same array.length)
console.log(orderSet.size);

element ရှိမရှိစစ်ချင်ရင် 
console.log(orderSet.has(value));

orderSet.add();
orderSet.delete();
orderSet.clear();

Set ထဲက data ကို ပြန်ထုတ်လို့မရပါဘူး။

=> Maps Functional

Maps သည် project ရေးတဲ့ နေရာတွင်ပိုပီးတော့ အသုံးဝင်တယ်။ Maps သည် JavaScript ရဲ့ Data Structure တစ်ခုဖြစ်ပြီးတော့ သူ့ရဲ့ Data ဖွဲ့စည်းပုံသည် key တွေ value တွေနဲ့ ဖွဲ့စည်းထားတယ်။ Object နဲ့ Data ဖွဲ့စည်းပုံတူပါတယ်။ Maps မှာတော့ key တွေကို ကြိုက်တာနဲ့ ပေးလို့ရတယ်။ ကန့်သတ်ချက်တွေမရှိပါဘူး။ Maps ကိုရေးရင် Set တုန်းကလိုပဲ constructor function ကို သုံးပြီးတော့ရေးပါတယ်။  Map() methods မှာရှိသုံးတဲ့ Set() method သည် Set() method မှာရှိတဲ့ add() method နဲ့တူပါတယ်။ ပထမ argument သည် key ဖြစ်ပြီး ဒုတိယ argument သည် value ဖြစ်တယ်။ 

const rest = new Map();
rest.set('name', 'Mahar Myanmar');
rest.set(1, 'Yangon,Myanmar');

Map ထဲမှာရှိတဲ့ data ကို ပြန်ထုတ်ချင်တယ် ဆိုရင် 
rest.get(key);

Map ထဲမှာရှိတဲ့ data တွေရှိမရှိ စစ်ချင်ရင်
rest.has(key); // return true/false

Map ထဲမှာရှိတဲ့ data တွေကို ဖျက်ချင်ရင် key ကို base ထားပြီး ဖျက်လို့ရတယ်။ 
rest.delete(key);

Map ရဲ့ element အရေအတွက်ကို ကြည့်ချင်ရင် 
rest.size();

Map ထဲမှာရှိတဲ့ data အားလုံးကို ဖျက်ချင်ရင် 
rest.clear();


builtin Function
-----------------

console.log();
console.warn();
console.error();
console.table();
window.alert();
alert();
Number();
String();
new Array();
push();
unshift();
pop();
shift();
includes();
indexOf();

builtin properties name
---------------
.length;
